queries 

view users and their roles:
SELECT username, first_name, last_name,
       CASE
           WHEN role = 1 THEN 'Student'
           WHEN role = 2 THEN 'Professor'
           WHEN role = 3 THEN 'Admin'
           ELSE 'Unknown'
       END AS role_name
FROM user_role_view;

or

SELECT u.username, u.first_name, u.last_name,
       CASE r.role
           WHEN 1 THEN 'student'
           WHEN 2 THEN 'professor'
           WHEN 3 THEN 'admin'
           ELSE 'unknown'
       END AS role_label
FROM user u
JOIN role r ON u.id = r.user_id
ORDER BY r.role ASC;


average book rating:
SELECT AVG(rating) AS average_rating
FROM ratings
WHERE book_id = <your_book_id>;

average book rating for all the books: == procedure: avgrating()
SELECT b.titleBK, b.ISBN, AVG(r.rating) AS average_rating
FROM book b
LEFT JOIN ratings r ON b.ISBN = r.book_id
GROUP BY b.titleBK, b.ISBN;

SELECT r.reservation_id, u.first_name, u.last_name, DATEDIFF(CURDATE(), r.expected_date) AS delayed_days
FROM reservation r
JOIN user u ON r.user_id = u.id
WHERE r.return_date IS NULL
  AND CURDATE() > r.expected_date
  order by delayed_days;

  SELECT r.reservation_id, u.first_name, u.last_name, DATEDIFF(CURDATE(), r.expected_date) AS delayed_days
FROM reservation r
JOIN user u ON r.user_id = u.id
WHERE r.return_date IS NULL
  AND CURDATE() > r.expected_date
  order by u.first_name ASC;

  SELECT r.reservation_id, u.first_name, u.last_name, DATEDIFF(CURDATE(), r.expected_date) AS delayed_days
FROM reservation r
JOIN user u ON r.user_id = u.id
WHERE r.return_date IS NULL
  AND CURDATE() > r.expected_date
  order by u.last_name ASC;


DELETE FROM reservation where reservation_status = 0 and DATE_ADD(reservation_date, INTERVAL 7 DAY) <= CURDATE();

DELIMITER //

CREATE PROCEDURE check_book_availability(IN book_id_val INT)
BEGIN
    DECLARE available_inventory INT;
    DECLARE reservation_id_val INT;
    DECLARE school_id_val INT;

    -- Get the reservation with the earliest reservation date and status = 0 for the same book
    SELECT id, school_id INTO reservation_id_val, school_id_val
    FROM reservation
    WHERE book_id = book_id_val AND reservation_status = 0
    ORDER BY reservation_date ASC
    LIMIT 1;

    -- Check if the reservation exists and the book inventory is greater than 0
    IF reservation_id_val IS NOT NULL THEN
        SET available_inventory = (SELECT inventory FROM book_school WHERE book_id = book_id_val AND school_id = school_id_val);

        IF available_inventory > 0 THEN
            -- Call book_borrow() for the reservation with the earliest reservation date and status = 0
            CALL book_borrow(reservation_id_val);
        END IF;
    END IF;
END //

DELIMITER ;

