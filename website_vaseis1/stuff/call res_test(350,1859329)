call res_test(350,1859329)

209611 2 0
176719 2 3
199 

DELIMITER //

CREATE PROCEDURE return_book(IN reservation_ex INT)
BEGIN
    -- Declare variables
    DECLARE book_id_val INT;
    DECLARE school_id_val INT;
    DECLARE user_id_val INT;

    -- Get book_id, school_id, and user_id from the reservation
    SELECT book_id, school_id, user_id INTO book_id_val, school_id_val, user_id_val
    FROM reservation
    WHERE reservation_id = reservation_ex;

    -- Update the return_date to current date
    UPDATE reservation
    SET return_date = CURDATE()
    WHERE reservation_id = reservation_ex;

    -- Increase inventory by 1 for the book and school
    UPDATE book_school
    SET inventory = inventory + 1
    WHERE book_id = book_id_val AND school_id = school_id_val;

    -- Decrease num_books by 1 for the user
    UPDATE user
    SET num_books = num_books - 1
    WHERE id = user_id_val;
    
    SELECT 'Book returned successfully.' AS message;
    CALL check_book_inv(book_id_val, school_id_val);
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE check_book_inv(IN book_ex INT, IN school_ex INT)
BEGIN
    DECLARE reservation_id_val INT;

    SELECT reservation_id INTO reservation_id_val FROM reservation WHERE book_id = book_ex AND school_id = school_ex AND reservation_status = 0 ORDER BY reservation_date LIMIT 1;

    IF reservation_id_val IS NOT NULL THEN
        CALL borrow_book(reservation_id_val);
    END IF;
END //

DELIMITER ;


764289, 3);

DELIMITER //

CREATE PROCEDURE return_book(IN reservation_ex INT)
BEGIN
    -- Declare variables
    DECLARE book_id_val INT;
    DECLARE school_id_val INT;
    DECLARE user_id_val INT;

    -- Get book_id, school_id, and user_id from the reservation
    SELECT book_id, school_id, user_id INTO book_id_val, school_id_val, user_id_val
    FROM reservation
    WHERE reservation_id = reservation_ex;

    -- Update the return_date to current date
    UPDATE reservation
    SET return_date = CURDATE()
    WHERE reservation_id = reservation_ex;

    -- Increase inventory by 1 for the book and school
    UPDATE book_school
    SET inventory = inventory + 1
    WHERE book_id = book_id_val AND school_id = school_id_val;

    -- Decrease num_books by 1 for the user
    UPDATE user
    SET num_books = num_books - 1
    WHERE id = user_id_val;

    SELECT 'Book returned successfully.' AS message;

    -- Call check_book_inv procedure
    CALL check_book_inv(book_id_val, school_id_val);
END //

DELIMITER ;


@app.route("/book", methods=["GET", "POST"])
def book():
    if "username" in session:
        conn = pymysql.connect(
            host="localhost",
            user="root",
            password="2403",
            db="vas",
            charset="utf8mb4",
            cursorclass=pymysql.cursors.DictCursor,
        )

        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM category")
            categories = cursor.fetchall()

        if request.method == "POST":
            search_query = request.form.get("search_query")
            category_id = request.form.get("category_id")

            if category_id == "0":
                category_id = None

            sql = "SELECT b.titleBK, b.ISBN FROM book b WHERE b.titleBK LIKE %s"

            params = [f"%{search_query}%"]

            if category_id is not None:
                sql += " AND EXISTS (SELECT 1 FROM book_category bc WHERE bc.book_id = b.ISBN AND bc.category_id = %s)"
                params.append(category_id)

            with conn.cursor() as cursor:
                cursor.execute(sql, params)
                data = cursor.fetchall()
        else:
            sql = "SELECT b.titleBK, b.ISBN, GROUP_CONCAT(a.name) AS author_names FROM book b INNER JOIN book_author ba ON b.ISBN = ba.book_isbn INNER JOIN author a ON ba.author_id = a.id GROUP BY b.titleBK, b.ISBN;"
            with conn.cursor() as cursor:
                cursor.execute(sql)
                data = cursor.fetchall()

        conn.close()

        return render_template("book.html", data=data, categories=categories)
    else:
        return redirect(url_for("login"))


{% extends 'index.html' %} {% block content %}
<h1 style="color: black">Books</h1>
<div class="container content-block1">
  <div class="search-container">
    <form action="{{ url_for('book') }}" method="POST">
      <input type="text" name="search_query" placeholder="Search..." />
      <select name="category_id">
        <option value="0">No Category</option>
        {% for category in categories %}
        <option value="{{ category.id }}">{{ category.category }}</option>
        {% endfor %}
      </select>
      <button type="submit">Search</button>
    </form>
  </div>
  <div class="item-list">
    <div class="list-header">
      <span>Book List</span>
    </div>
    {% for item in data %}
    <div class="list-row">
      <div class="book-details">
        <a
          href="{{ url_for('book_info', isbn=item['ISBN']) }}"
          class="book-link"
        >
          <span class="title">{{ item['titleBK'] }}</span>
        </a>
        <span class="authors">by&nbsp;{{ item['author_names'] }}</span>
      </div>
      <div class="rent-container">
        <a href="{{ url_for('rent', isbn=item['ISBN']) }}" class="rent-button"
          >Rent</a
        >
      </div>
    </div>
    {% endfor %}
  </div>
</div>
<style>
  .item-list {
    display: flex;
    flex-direction: column;
    border: 1px solid #ccc;
  }

  .list-header {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background-color: #f5f5f5;
    font-weight: bold;
    border-bottom: 1px solid #ccc;
  }

  .list-header span {
    flex-basis: 100%;
  }

  .list-row {
    display: flex;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid #ccc;
    text-decoration: none;
    color: #000;
  }

  .book-details {
    flex-basis: 50%;
    display: flex;
    align-items: center;
  }

  .book-details .title {
    margin-right: 10px;
  }

  .book-link {
    text-decoration: none;
    color: inherit;
  }

  .rent-container {
    margin-left: auto;
  }

  .rent-button {
    padding: 5px 10px;
    border-radius: 5px;
    background-color: #f5f5f5;
    color: #333;
    text-decoration: none;
    cursor: pointer;
  }

  .search-container {
    margin-bottom: 10px;
  }

  .search-container input[type="text"],
  .search-container select {
    padding: 5px;
  }

  .search-container button {
    padding: 5px 10px;
    border-radius: 5px;
    background-color: #f5f5f5;
    color: #333;
    cursor: pointer;
  }

  .book-details .authors {
    margin-left: 10px;
    font-style: italic;
    display: inline-block;
    text-align: right;
  }
</style>
{% endblock %}
